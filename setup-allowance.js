/**
 * Script para configurar o allowance do contrato CTDQuizBurner
 * 
 * ‚ö†Ô∏è  IMPORTANTE: Este script requer a PRIVATE KEY da Treasury
 * Execute apenas se voc√™ tem acesso √† wallet Treasury
 */

const { ethers } = require('ethers')
const readline = require('readline')

// Configura√ß√µes
const BSC_RPC_URL = 'https://bsc-dataseed.binance.org/'
const CTD_TOKEN_ADDRESS = '0x7f890a4a575558307826C82e4cb6E671f3178bfc'
const TREASURY_ADDRESS = '0x27f79d0a52F88D04e1d04875Fe55d6C23f514Ec4'
const BURNER_CONTRACT_ADDRESS = '0xB5e0393E1D8E95bF5cf4fd11b03abD03855eB958'

// ABI do token ERC-20
const ERC20_ABI = [
  'function approve(address spender, uint256 amount) external returns (bool)',
  'function allowance(address owner, address spender) external view returns (uint256)',
  'function balanceOf(address account) external view returns (uint256)',
  'function decimals() external view returns (uint8)',
  'function symbol() external view returns (string)'
]

// Interface para input do usu√°rio
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
})

function question(query) {
  return new Promise(resolve => rl.question(query, resolve))
}

async function setupAllowance() {
  try {
    console.log('\nüîß Setup de Allowance - CTDQuizBurner\n')
    console.log('=' .repeat(60))
    console.log('‚ö†Ô∏è  Este script ir√° configurar o allowance para o contrato')
    console.log('   poder queimar tokens da Treasury')
    console.log('=' .repeat(60) + '\n')

    // Solicitar private key
    console.log('üîë Digite a PRIVATE KEY da Treasury:')
    console.log('   (Endere√ßo esperado: ' + TREASURY_ADDRESS + ')')
    const privateKey = await question('   Private Key: ')

    if (!privateKey || privateKey.length < 64) {
      throw new Error('Private key inv√°lida')
    }

    // Conectar ao provider
    console.log('\nüì° Conectando √† BSC Mainnet...')
    const provider = new ethers.JsonRpcProvider(BSC_RPC_URL)
    
    // Criar wallet
    const wallet = new ethers.Wallet(privateKey, provider)
    const walletAddress = await wallet.getAddress()

    console.log(`‚úÖ Wallet conectada: ${walletAddress}`)

    // Verificar se √© a Treasury
    if (walletAddress.toLowerCase() !== TREASURY_ADDRESS.toLowerCase()) {
      throw new Error(`‚ùå Wallet incorreta! Esperado: ${TREASURY_ADDRESS}, Recebido: ${walletAddress}`)
    }

    // Criar inst√¢ncia do contrato
    const ctdToken = new ethers.Contract(
      CTD_TOKEN_ADDRESS,
      ERC20_ABI,
      wallet
    )

    // Verificar saldo
    console.log('\nüí∞ Verificando saldo da Treasury...')
    const balance = await ctdToken.balanceOf(walletAddress)
    const decimals = await ctdToken.decimals()
    const symbol = await ctdToken.symbol()
    const balanceFormatted = ethers.formatUnits(balance, decimals)

    console.log(`   Saldo: ${parseFloat(balanceFormatted).toLocaleString('pt-BR')} ${symbol}`)

    if (balance === 0n) {
      throw new Error('‚ùå Treasury sem saldo de tokens!')
    }

    // Verificar allowance atual
    console.log('\nüîç Verificando allowance atual...')
    const currentAllowance = await ctdToken.allowance(walletAddress, BURNER_CONTRACT_ADDRESS)
    const currentAllowanceFormatted = ethers.formatUnits(currentAllowance, decimals)

    console.log(`   Allowance atual: ${parseFloat(currentAllowanceFormatted).toLocaleString('pt-BR')} ${symbol}`)

    // Solicitar quantidade
    console.log('\nüìä Quanto deseja aprovar?')
    console.log('   1. 100,000 CTD (100 queimas)')
    console.log('   2. 1,000,000 CTD (1000 queimas) - RECOMENDADO')
    console.log('   3. Valor customizado')
    console.log('   4. Aprovar tudo (unlimited)')
    
    const choice = await question('\n   Escolha (1-4): ')

    let amountToApprove
    let amountLabel

    switch(choice.trim()) {
      case '1':
        amountToApprove = ethers.parseUnits('100000', decimals)
        amountLabel = '100,000 CTD'
        break
      case '2':
        amountToApprove = ethers.parseUnits('1000000', decimals)
        amountLabel = '1,000,000 CTD'
        break
      case '3':
        const customAmount = await question('   Digite a quantidade: ')
        amountToApprove = ethers.parseUnits(customAmount, decimals)
        amountLabel = `${parseFloat(customAmount).toLocaleString('pt-BR')} CTD`
        break
      case '4':
        amountToApprove = ethers.MaxUint256
        amountLabel = 'UNLIMITED (m√°ximo poss√≠vel)'
        break
      default:
        throw new Error('Op√ß√£o inv√°lida')
    }

    // Confirma√ß√£o
    console.log('\n‚ö†Ô∏è  CONFIRMA√á√ÉO:')
    console.log(`   Owner: ${walletAddress}`)
    console.log(`   Spender: ${BURNER_CONTRACT_ADDRESS}`)
    console.log(`   Amount: ${amountLabel}`)
    
    const confirm = await question('\n   Confirma a opera√ß√£o? (sim/n√£o): ')

    if (confirm.toLowerCase() !== 'sim') {
      console.log('\n‚ùå Opera√ß√£o cancelada pelo usu√°rio')
      rl.close()
      return
    }

    // Executar approve
    console.log('\nüöÄ Enviando transa√ß√£o de approve...')
    const tx = await ctdToken.approve(BURNER_CONTRACT_ADDRESS, amountToApprove)
    
    console.log(`‚è≥ Transa√ß√£o enviada: ${tx.hash}`)
    console.log('   Aguardando confirma√ß√£o...')

    const receipt = await tx.wait()
    
    console.log(`‚úÖ Transa√ß√£o confirmada! Block: ${receipt.blockNumber}`)

    // Verificar novo allowance
    console.log('\nüîç Verificando novo allowance...')
    const newAllowance = await ctdToken.allowance(walletAddress, BURNER_CONTRACT_ADDRESS)
    const newAllowanceFormatted = ethers.formatUnits(newAllowance, decimals)

    console.log(`   Novo allowance: ${parseFloat(newAllowanceFormatted).toLocaleString('pt-BR')} ${symbol}`)

    console.log('\n' + '='.repeat(60))
    console.log('üéâ ALLOWANCE CONFIGURADO COM SUCESSO!')
    console.log('=' .repeat(60))
    console.log('\n‚úÖ O contrato CTDQuizBurner agora pode:')
    console.log(`   ‚Ä¢ Fazer transferFrom() da Treasury`)
    console.log(`   ‚Ä¢ Queimar at√© ${parseFloat(newAllowanceFormatted).toLocaleString('pt-BR')} ${symbol}`)
    console.log(`   ‚Ä¢ Permitir ${Math.floor(parseFloat(newAllowanceFormatted) / 1000).toLocaleString('pt-BR')} burns de usu√°rios`)
    
    console.log('\nüìù Pr√≥ximos passos:')
    console.log('   1. Teste em produ√ß√£o: https://chaintalkdailyhub.com/quiz')
    console.log('   2. Verifique no BscScan: https://bscscan.com/tx/' + tx.hash)
    console.log('   3. Monitore burns: https://bscscan.com/address/' + BURNER_CONTRACT_ADDRESS)
    
    console.log('\n')

  } catch (error) {
    console.error('\n‚ùå Erro ao configurar allowance:', error.message)
    
    if (error.code === 'INSUFFICIENT_FUNDS') {
      console.error('\nüí∞ Saldo insuficiente de BNB para pagar gas')
      console.error('   Envie pelo menos 0.005 BNB para a Treasury')
    } else if (error.code === 'ACTION_REJECTED') {
      console.error('\n‚ùå Transa√ß√£o rejeitada')
    }
  } finally {
    rl.close()
  }
}

// Executar
setupAllowance()
