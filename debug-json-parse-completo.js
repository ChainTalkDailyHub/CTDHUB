/**
 * An√°lise Completa de Erro JSON Parse
 * Investiga√ß√£o sistem√°tica de todas as poss√≠veis causas
 */

async function analisarErroJSONParse() {
    console.log('üîç AN√ÅLISE COMPLETA - Erro JSON Parse');
    console.log('=' .repeat(60));
    
    const baseUrl = 'https://extraordinary-treacle-1bc552.netlify.app';
    
    console.log('üìã POSS√çVEIS CAUSAS DO ERRO JSON PARSE:');
    console.log('');
    
    // 1. Teste direto da fun√ß√£o health
    console.log('1Ô∏è‚É£ TESTE: Health Check - Response Format');
    console.log('-'.repeat(40));
    
    try {
        const healthResponse = await fetch(`${baseUrl}/.netlify/functions/health`);
        const healthText = await healthResponse.text();
        
        console.log(`Status: ${healthResponse.status}`);
        console.log(`Content-Type: ${healthResponse.headers.get('content-type')}`);
        console.log(`Content-Length: ${healthText.length}`);
        console.log(`First char: "${healthText.charAt(0)}"`);
        console.log(`Last char: "${healthText.charAt(healthText.length - 1)}"`);
        console.log(`Raw response (first 200):`);
        console.log(healthText.substring(0, 200));
        console.log('');
        
        // Tentar parse
        try {
            const parsed = JSON.parse(healthText);
            console.log('‚úÖ Health JSON parse: SUCCESS');
        } catch (e) {
            console.log(`‚ùå Health JSON parse ERROR: ${e.message}`);
            console.log('üîç Problema detectado no health check!');
        }
        
    } catch (error) {
        console.log(`‚ùå Health request failed: ${error.message}`);
    }
    
    console.log('\n2Ô∏è‚É£ TESTE: Frontend API Call');
    console.log('-'.repeat(40));
    
    // Simular exatamente o que o frontend faz
    const testPayload = {
        sessionId: 'debug-frontend-' + Date.now(),
        answers: [
            { questionNumber: 1, answer: "Debug test" },
            { questionNumber: 2, answer: "Frontend simulation" }
        ],
        userProfile: { name: "Debug", email: "debug@test.com" }
    };
    
    try {
        console.log('üì§ Simulando chamada exata do frontend...');
        
        const apiResponse = await fetch(`${baseUrl}/.netlify/functions/binno-final-analysis`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(testPayload)
        });
        
        const contentType = apiResponse.headers.get('content-type') || '';
        const rawResponse = await apiResponse.text();
        
        console.log(`Status: ${apiResponse.status}`);
        console.log(`Content-Type: "${contentType}"`);
        console.log(`Response length: ${rawResponse.length}`);
        console.log(`First 10 chars: "${rawResponse.substring(0, 10)}"`);
        console.log(`Last 10 chars: "${rawResponse.substring(rawResponse.length - 10)}"`);
        
        // Verificar se √© JSON v√°lido
        try {
            const parsed = JSON.parse(rawResponse);
            console.log('‚úÖ API JSON parse: SUCCESS');
            console.log(`Report ID: ${parsed.report?.reportId || 'N/A'}`);
        } catch (parseError) {
            console.log(`‚ùå API JSON parse ERROR: ${parseError.message}`);
            console.log('üîç PROBLEMA DETECTADO NA API!');
            console.log('Full response:');
            console.log(rawResponse);
        }
        
    } catch (error) {
        console.log(`‚ùå API request failed: ${error.message}`);
    }
    
    console.log('\n3Ô∏è‚É£ AN√ÅLISE: Poss√≠veis Causas Sistem√°ticas');
    console.log('-'.repeat(40));
    
    const possiveisCausas = [
        {
            categoria: 'ENCODING ISSUES',
            causas: [
                'BOM (Byte Order Mark) no in√≠cio do arquivo',
                'Caracteres invis√≠veis (zero-width spaces)',
                'Encoding UTF-8 com problemas',
                'Line endings (CRLF vs LF) corrompidos'
            ]
        },
        {
            categoria: 'FUNCTION RESPONSE FORMAT',
            causas: [
                'Fun√ß√£o retornando HTML em vez de JSON',
                'Erro 500 retornando p√°gina de erro HTML',
                'CORS preflight retornando HTML',
                'Timeout retornando p√°gina Netlify'
            ]
        },
        {
            categoria: 'TEMPLATE PARSING ISSUES',
            causas: [
                'AI retornando JSON malformado',
                'Template parsing falhando',
                'Caracteres especiais n√£o escapados',
                'String interpolation quebrada'
            ]
        },
        {
            categoria: 'ENVIRONMENT VARIABLES',
            causas: [
                'OPENAI_API_KEY com formato incorreto',
                'Vari√°veis n√£o propagadas (cache)',
                'Escopo incorreto (branch-specific)',
                'Caracteres especiais na chave'
            ]
        },
        {
            categoria: 'NETLIFY SPECIFIC',
            causas: [
                'Function timeout (10s limit)',
                'Memory limit exceeded',
                'Cold start issues',
                'Build/deploy cache problems'
            ]
        },
        {
            categoria: 'CODE ISSUES',
            causas: [
                'Double JSON.stringify',
                'Async/await mal implementado',
                'Error handling inadequado',
                'Response headers incorretos'
            ]
        }
    ];
    
    possiveisCausas.forEach((grupo, index) => {
        console.log(`\n${index + 1}. ${grupo.categoria}:`);
        grupo.causas.forEach(causa => {
            console.log(`   ‚Ä¢ ${causa}`);
        });
    });
    
    console.log('\n4Ô∏è‚É£ SOLU√á√ïES PARA TESTAR');
    console.log('-'.repeat(40));
    
    const solucoes = [
        'Redeploy manual for√ßado (clear cache)',
        'Verificar logs das functions em tempo real',
        'Testar com OPENAI_API_KEY diferente',
        'Verificar se vari√°veis est√£o em "All deploys"',
        'Testar em browser diferente (limpar cache)',
        'Verificar encoding dos arquivos de fun√ß√£o',
        'Adicionar logging detalhado na fun√ß√£o',
        'Testar com payload menor',
        'Verificar se h√° caracteres especiais na chave'
    ];
    
    solucoes.forEach((solucao, index) => {
        console.log(`${index + 1}. ${solucao}`);
    });
    
    console.log('\n5Ô∏è‚É£ DEBUGGING AVAN√áADO NECESS√ÅRIO');
    console.log('-'.repeat(40));
    console.log('‚Ä¢ Verificar logs Netlify Functions em tempo real');
    console.log('‚Ä¢ Adicionar console.log na fun√ß√£o antes do return');
    console.log('‚Ä¢ Testar localmente com netlify dev');
    console.log('‚Ä¢ Verificar se h√° middleware interferindo');
    console.log('‚Ä¢ An√°lise byte-by-byte da response');
}

analisarErroJSONParse();