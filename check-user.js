/**
 * Verificar Status de Usu√°rio Espec√≠fico - CTDHUB
 * Verifica se um usu√°rio j√° completou o burn e detalhes
 */

const { ethers } = require('ethers')

// Configura√ß√µes
const BSC_RPC_URL = 'https://bsc-dataseed.binance.org/'
const BURNER_CONTRACT_ADDRESS = '0xB5e0393E1D8E95bF5cf4fd11b03abD03855eB958'

// ABI do contrato
const BURNER_ABI = [
  'function hasCompletedQuiz(address user) external view returns (bool)',
  'function canBurnTokens(address user) external view returns (bool eligible, string reason)',
  'function getUserInfo(address user) external view returns (bool hasCompleted, uint256 burnedAmount, uint256 burnTimestamp, string quizId)'
]

async function checkUser(userAddress) {
  console.log('\nüîç VERIFICANDO USU√ÅRIO\n')
  console.log('‚ïê'.repeat(60))
  console.log(`   Endere√ßo: ${userAddress}`)
  console.log('‚ïê'.repeat(60))
  
  try {
    // Validar endere√ßo
    if (!ethers.isAddress(userAddress)) {
      throw new Error('Endere√ßo inv√°lido!')
    }
    
    // Conectar ao provider
    const provider = new ethers.JsonRpcProvider(BSC_RPC_URL)
    console.log('\n‚úÖ Conectado √† BSC Mainnet')
    
    // Criar inst√¢ncia do contrato
    const contract = new ethers.Contract(BURNER_CONTRACT_ADDRESS, BURNER_ABI, provider)
    console.log('‚úÖ Contrato inicializado')
    
    // Verificar se j√° completou
    const hasCompleted = await contract.hasCompletedQuiz(userAddress)
    
    console.log('\nüìä STATUS DO USU√ÅRIO:\n')
    
    if (hasCompleted) {
      console.log('   üî• J√° completou o burn: SIM')
      
      // Obter detalhes
      const userInfo = await contract.getUserInfo(userAddress)
      const [completed, burnedAmount, burnTimestamp, quizId] = userInfo
      
      console.log('\n   üìù Detalhes do Burn:')
      console.log(`      - Tokens Queimados: ${ethers.formatEther(burnedAmount)} CTD`)
      console.log(`      - Data/Hora: ${new Date(Number(burnTimestamp) * 1000).toLocaleString()}`)
      console.log(`      - Quiz ID: ${quizId}`)
      
      // Verificar elegibilidade (deve ser false)
      const [eligible, reason] = await contract.canBurnTokens(userAddress)
      console.log('\n   ‚ö†Ô∏è Pode fazer novo burn: N√ÉO')
      console.log(`      Motivo: ${reason}`)
      
    } else {
      console.log('   ‚úÖ J√° completou o burn: N√ÉO')
      console.log('   ‚úÖ √â primeira vez')
      
      // Verificar elegibilidade
      const [eligible, reason] = await contract.canBurnTokens(userAddress)
      
      console.log('\n   üìã Elegibilidade:')
      if (eligible) {
        console.log(`      ‚úÖ ELEG√çVEL para fazer burn`)
        console.log(`      Status: ${reason}`)
      } else {
        console.log(`      ‚ùå N√ÉO ELEG√çVEL`)
        console.log(`      Motivo: ${reason}`)
      }
    }
    
    console.log('\n' + '‚ïê'.repeat(60))
    console.log('‚úÖ Verifica√ß√£o conclu√≠da!')
    console.log('‚ïê'.repeat(60))
    console.log()
    
  } catch (error) {
    console.error('\n‚ùå ERRO:', error.message)
    console.error('\nStack:', error.stack)
    process.exit(1)
  }
}

// Obter endere√ßo da linha de comando
const userAddress = process.argv[2]

if (!userAddress) {
  console.log('\n‚ùå ERRO: Endere√ßo n√£o fornecido\n')
  console.log('Uso:')
  console.log('   node check-user.js <ENDERE√áO_WALLET>\n')
  console.log('Exemplo:')
  console.log('   node check-user.js 0x742d35Cc6634C0532925a3b844Bc9e7595f0bEb\n')
  process.exit(1)
}

// Executar
checkUser(userAddress).catch(error => {
  console.error('\n‚ùå Erro fatal:', error)
  process.exit(1)
})
